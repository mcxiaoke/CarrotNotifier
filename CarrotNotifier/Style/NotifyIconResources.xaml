<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:widget="clr-namespace:GenshinNotifier.Widget">
    <!--  The taskbar context menu - the first row is a dummy to show off simple data binding  -->
    <!--
        The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
        reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
    -->
    <ContextMenu x:Shared="false" x:Key="SysTrayMenu">
        <MenuItem Header="显示小组件" Command="{Binding ShowWindowCommand}" />
        <MenuItem Header="隐藏小组件" Command="{Binding HideWindowCommand}" />
        <Separator />
        <MenuItem Header="检查更新" Command="{Binding CheckUpdateCommand}" />
        <MenuItem Header="项目主页" Command="{Binding GoToProjectCommmand}" />
        <Separator />
        <MenuItem Header="重启" Command="{Binding RestartApplicationCommand}" />
        <MenuItem Header="退出" Command="{Binding ExitApplicationCommand}" />
    </ContextMenu>

    <!--  the application's NotifyIcon - started from App.xaml.cs. Declares its own view model.  -->
    <tb:TaskbarIcon x:Key="SysTrayIcon" IconSource="/Assets/carrot_512.ico"
            ToolTipText="双击显示小组件，右键显示菜单" NoLeftClickDelay="True"
            DoubleClickCommand="{Binding ShowWindowCommand}"
            ContextMenu="{StaticResource SysTrayMenu}">

        <!--  self-assign a data context (could also be done programmatically)  -->
        <tb:TaskbarIcon.DataContext>
            <widget:NotifyIconViewModel />
        </tb:TaskbarIcon.DataContext>
    </tb:TaskbarIcon>
</ResourceDictionary>